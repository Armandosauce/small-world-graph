/* Tuple Image Validator
 * ---------------------
 *  This beauty takes an existing tuples file generated by the wikipedia tools,
 *  then it sees what is in S3 and only outputs tuples that actually have the
 *  corresponding file in s3.
 */

#include <iostream>
#include <string>
#include <fstream>
#include <signal.h>

#include "s3_helper.h"
#include "tuple_image_mapper.h"
#include <google/dense_hash_set>
#include "equality.h"
#include "paul_hsieh_hash.h"

using google::dense_hash_set;

typedef dense_hash_set<const char*,PaulHsiehHash,eqstr> S3KeySet;

/* Globals */
static S3KeySet __key_set;
static shared_ptr<S3Helper> __sh = S3Helper::instance();
static TupleImageMapper* __tim = TupleImageMapper::instance();
static int output_count = 0;

/* End Globals */

static void fill_key_set(const char* bucket_name) 
{
  FileList* fl = __sh->ls(bucket_name);
  for(FileList::const_iterator ii = fl->begin(); ii != fl->end(); ii++) {
    char* key = *ii;
    __key_set.insert(key);
  }
  delete fl;
}

static void output_if_exists(const char* key, const char* file)
{
  S3KeySet::const_iterator res = __key_set.find(file + 1);
  if (res != __key_set.end()) {
    cout << key << "|" << file << endl;
    output_count++;
  }
}


int
main(int argc, char **argv)
{
  if (argc < 3) {
    cerr << "Please specify a tuples file and a bucket of images" << endl;
    exit(-1);
  }
  signal(SIGPIPE,SIG_IGN);
  __tim = TupleImageMapper::instance();
  __tim->load(argv[1]);
  cerr << __tim->size() << " key/value pairs loaded." << endl;
  __key_set.set_empty_key(NULL);
  cerr << "Filling key set." << endl;
  fill_key_set(argv[2]);
  cerr << __key_set.size() << " valid files in S3." << endl;
  __tim->map(output_if_exists);
  cerr << output_count << " valid key/value pairs outputted." << endl;
  return 0;
}
