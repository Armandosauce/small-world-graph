/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef PageParseQueue_H
#define PageParseQueue_H

#include <TProcessor.h>
#include "page_parse_queue_types.h"



class PageParseQueueIf {
 public:
  virtual ~PageParseQueueIf() {}
  virtual void dequeue(std::vector<RawPage> & _return) = 0;
  virtual void enqueue(const std::vector<RawPage> & pages) = 0;
};

class PageParseQueueNull : virtual public PageParseQueueIf {
 public:
  virtual ~PageParseQueueNull() {}
  void dequeue(std::vector<RawPage> & /* _return */) {
    return;
  }
  void enqueue(const std::vector<RawPage> & /* pages */) {
    return;
  }
};

class PageParseQueue_dequeue_args {
 public:

  PageParseQueue_dequeue_args() {
  }

  virtual ~PageParseQueue_dequeue_args() throw() {}


  bool operator == (const PageParseQueue_dequeue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PageParseQueue_dequeue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageParseQueue_dequeue_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_dequeue_pargs {
 public:


  virtual ~PageParseQueue_dequeue_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_dequeue_result {
 public:

  PageParseQueue_dequeue_result() {
  }

  virtual ~PageParseQueue_dequeue_result() throw() {}

  std::vector<RawPage>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const PageParseQueue_dequeue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PageParseQueue_dequeue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageParseQueue_dequeue_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_dequeue_presult {
 public:


  virtual ~PageParseQueue_dequeue_presult() throw() {}

  std::vector<RawPage> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class PageParseQueue_enqueue_args {
 public:

  PageParseQueue_enqueue_args() {
  }

  virtual ~PageParseQueue_enqueue_args() throw() {}

  std::vector<RawPage>  pages;

  struct __isset {
    __isset() : pages(false) {}
    bool pages;
  } __isset;

  bool operator == (const PageParseQueue_enqueue_args & rhs) const
  {
    if (!(pages == rhs.pages))
      return false;
    return true;
  }
  bool operator != (const PageParseQueue_enqueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageParseQueue_enqueue_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_enqueue_pargs {
 public:


  virtual ~PageParseQueue_enqueue_pargs() throw() {}

  const std::vector<RawPage> * pages;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_enqueue_result {
 public:

  PageParseQueue_enqueue_result() {
  }

  virtual ~PageParseQueue_enqueue_result() throw() {}

  QueueFullException qfe;

  struct __isset {
    __isset() : qfe(false) {}
    bool qfe;
  } __isset;

  bool operator == (const PageParseQueue_enqueue_result & rhs) const
  {
    if (!(qfe == rhs.qfe))
      return false;
    return true;
  }
  bool operator != (const PageParseQueue_enqueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageParseQueue_enqueue_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class PageParseQueue_enqueue_presult {
 public:


  virtual ~PageParseQueue_enqueue_presult() throw() {}

  QueueFullException qfe;

  struct __isset {
    __isset() : qfe(false) {}
    bool qfe;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class PageParseQueueClient : virtual public PageParseQueueIf {
 public:
  PageParseQueueClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PageParseQueueClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void dequeue(std::vector<RawPage> & _return);
  void send_dequeue();
  void recv_dequeue(std::vector<RawPage> & _return);
  void enqueue(const std::vector<RawPage> & pages);
  void send_enqueue(const std::vector<RawPage> & pages);
  void recv_enqueue();
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class PageParseQueueProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<PageParseQueueIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (PageParseQueueProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_dequeue(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_enqueue(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  PageParseQueueProcessor(boost::shared_ptr<PageParseQueueIf> iface) :
    iface_(iface) {
    processMap_["dequeue"] = &PageParseQueueProcessor::process_dequeue;
    processMap_["enqueue"] = &PageParseQueueProcessor::process_enqueue;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~PageParseQueueProcessor() {}
};

class PageParseQueueMultiface : virtual public PageParseQueueIf {
 public:
  PageParseQueueMultiface(std::vector<boost::shared_ptr<PageParseQueueIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PageParseQueueMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PageParseQueueIf> > ifaces_;
  PageParseQueueMultiface() {}
  void add(boost::shared_ptr<PageParseQueueIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void dequeue(std::vector<RawPage> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->dequeue(_return);
        return;
      } else {
        ifaces_[i]->dequeue(_return);
      }
    }
  }

  void enqueue(const std::vector<RawPage> & pages) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->enqueue(pages);
    }
  }

};



#endif
