// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SiteRelationships.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include "relationship_holder.h"

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

class SiteRelationshipsHandler : virtual public SiteRelationshipsIf {
 public:
  SiteRelationshipsHandler() {
    // Your initialization goes here
    rh_ = RelationshipHolder::instance();
    rh_->load("/mnt/relationships/relationships");
  }

  void sites_close_to(std::vector<int32_t> & _return, const int32_t site_id) {
    rh_->sites_close_to(_return,site_id);
  }

  void distances(std::vector<SiteRelationship> & _return, const std::vector<int32_t> & site_ids) {
    rh_->distances(_return,site_ids);
  }

 protected:
  shared_ptr<RelationshipHolder> rh_;


};

int main(int argc, char **argv) {
  int port = 9092;
  shared_ptr<SiteRelationshipsHandler> handler(new SiteRelationshipsHandler());
  shared_ptr<TProcessor> processor(new SiteRelationshipsProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

