/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef WikiDistanceCalculator_H
#define WikiDistanceCalculator_H

#include <TProcessor.h>
#include "wiki_distance_calculator_types.h"



class WikiDistanceCalculatorIf {
 public:
  virtual ~WikiDistanceCalculatorIf() {}
  virtual void distances(std::vector<WikiDistance> & _return, const std::vector<std::string> & tuples) = 0;
  virtual void page_chain(std::vector<std::string> & _return, const std::string& first, const std::string& second) = 0;
};

class WikiDistanceCalculatorNull : virtual public WikiDistanceCalculatorIf {
 public:
  virtual ~WikiDistanceCalculatorNull() {}
  void distances(std::vector<WikiDistance> & /* _return */, const std::vector<std::string> & /* tuples */) {
    return;
  }
  void page_chain(std::vector<std::string> & /* _return */, const std::string& /* first */, const std::string& /* second */) {
    return;
  }
};

class WikiDistanceCalculator_distances_args {
 public:

  WikiDistanceCalculator_distances_args() {
  }

  virtual ~WikiDistanceCalculator_distances_args() throw() {}

  std::vector<std::string>  tuples;

  struct __isset {
    __isset() : tuples(false) {}
    bool tuples;
  } __isset;

  bool operator == (const WikiDistanceCalculator_distances_args & rhs) const
  {
    if (!(tuples == rhs.tuples))
      return false;
    return true;
  }
  bool operator != (const WikiDistanceCalculator_distances_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WikiDistanceCalculator_distances_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_distances_pargs {
 public:


  virtual ~WikiDistanceCalculator_distances_pargs() throw() {}

  const std::vector<std::string> * tuples;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_distances_result {
 public:

  WikiDistanceCalculator_distances_result() {
  }

  virtual ~WikiDistanceCalculator_distances_result() throw() {}

  std::vector<WikiDistance>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const WikiDistanceCalculator_distances_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WikiDistanceCalculator_distances_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WikiDistanceCalculator_distances_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_distances_presult {
 public:


  virtual ~WikiDistanceCalculator_distances_presult() throw() {}

  std::vector<WikiDistance> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class WikiDistanceCalculator_page_chain_args {
 public:

  WikiDistanceCalculator_page_chain_args() : first(""), second("") {
  }

  virtual ~WikiDistanceCalculator_page_chain_args() throw() {}

  std::string first;
  std::string second;

  struct __isset {
    __isset() : first(false), second(false) {}
    bool first;
    bool second;
  } __isset;

  bool operator == (const WikiDistanceCalculator_page_chain_args & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const WikiDistanceCalculator_page_chain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WikiDistanceCalculator_page_chain_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_page_chain_pargs {
 public:


  virtual ~WikiDistanceCalculator_page_chain_pargs() throw() {}

  const std::string* first;
  const std::string* second;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_page_chain_result {
 public:

  WikiDistanceCalculator_page_chain_result() {
  }

  virtual ~WikiDistanceCalculator_page_chain_result() throw() {}

  std::vector<std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const WikiDistanceCalculator_page_chain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WikiDistanceCalculator_page_chain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WikiDistanceCalculator_page_chain_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class WikiDistanceCalculator_page_chain_presult {
 public:


  virtual ~WikiDistanceCalculator_page_chain_presult() throw() {}

  std::vector<std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class WikiDistanceCalculatorClient : virtual public WikiDistanceCalculatorIf {
 public:
  WikiDistanceCalculatorClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WikiDistanceCalculatorClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void distances(std::vector<WikiDistance> & _return, const std::vector<std::string> & tuples);
  void send_distances(const std::vector<std::string> & tuples);
  void recv_distances(std::vector<WikiDistance> & _return);
  void page_chain(std::vector<std::string> & _return, const std::string& first, const std::string& second);
  void send_page_chain(const std::string& first, const std::string& second);
  void recv_page_chain(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class WikiDistanceCalculatorProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<WikiDistanceCalculatorIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (WikiDistanceCalculatorProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_distances(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_page_chain(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  WikiDistanceCalculatorProcessor(boost::shared_ptr<WikiDistanceCalculatorIf> iface) :
    iface_(iface) {
    processMap_["distances"] = &WikiDistanceCalculatorProcessor::process_distances;
    processMap_["page_chain"] = &WikiDistanceCalculatorProcessor::process_page_chain;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~WikiDistanceCalculatorProcessor() {}
};

class WikiDistanceCalculatorMultiface : virtual public WikiDistanceCalculatorIf {
 public:
  WikiDistanceCalculatorMultiface(std::vector<boost::shared_ptr<WikiDistanceCalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WikiDistanceCalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WikiDistanceCalculatorIf> > ifaces_;
  WikiDistanceCalculatorMultiface() {}
  void add(boost::shared_ptr<WikiDistanceCalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void distances(std::vector<WikiDistance> & _return, const std::vector<std::string> & tuples) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->distances(_return, tuples);
        return;
      } else {
        ifaces_[i]->distances(_return, tuples);
      }
    }
  }

  void page_chain(std::vector<std::string> & _return, const std::string& first, const std::string& second) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->page_chain(_return, first, second);
        return;
      } else {
        ifaces_[i]->page_chain(_return, first, second);
      }
    }
  }

};



#endif
