/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef wiki_distance_calculator_TYPES_H
#define wiki_distance_calculator_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





class WikiDistance {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  WikiDistance() : first(""), second(""), distance(0) {
  }

  virtual ~WikiDistance() throw() {}

  std::string first;
  std::string second;
  int32_t distance;

  struct __isset {
    __isset() : first(false), second(false), distance(false) {}
    bool first;
    bool second;
    bool distance;
  } __isset;

  bool operator == (const WikiDistance & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    if (!(distance == rhs.distance))
      return false;
    return true;
  }
  bool operator != (const WikiDistance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WikiDistance & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
