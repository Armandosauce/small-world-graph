// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "WikiDistanceCalculator.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include "wikipedia_neighbor_set.h"
#include <iostream>

using namespace std;

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

class WikiDistanceCalculatorHandler : virtual public WikiDistanceCalculatorIf {
  public:
    WikiDistanceCalculatorHandler(const string& graph_file) {
      // Your initialization goes here
      ns_ = WikipediaNeighborSet::instance();
      ns_->load(graph_file.c_str());
    }

    void distances(std::vector<WikiDistance> & _return, const std::vector<std::string> & tuples) {
      RelationshipList results;
      ns_->distances(results,tuples);
      for(RelationshipList::const_iterator jj = results.begin(); jj != results.end(); jj++) {
        WikiDistance wd;
        wd.first = jj->first;
        wd.second = jj->second;
        wd.distance = jj->distance;
        _return.push_back(wd);
      }

      printf("%u : (%u results)\n", (unsigned int) tuples.size(), (unsigned int) results.size());

    }

    void page_chain(std::vector<std::string> & _return, const std::string& first, const std::string& second) {
      // Your implementation goes here
      printf("page_chain\n");
    }

  protected:
    WikipediaNeighborSet* ns_;

};

int main(int argc, char **argv) {
  int port = 9090;
  if (argc < 2) {
    cout << "Please specify a wikipedia neighbor file" << endl;
    exit(-1);
  }

  string neighbor_file = argv[1];
  shared_ptr<WikiDistanceCalculatorHandler> handler(new WikiDistanceCalculatorHandler(neighbor_file));
  shared_ptr<TProcessor> processor(new WikiDistanceCalculatorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

