/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "site_relationships_types.h"



const char* SiteRelationship::ascii_fingerprint = "3E7765496BCF0063C35428E22F902724";
const uint8_t SiteRelationship::binary_fingerprint[16] = {0x3E,0x77,0x65,0x49,0x6B,0xCF,0x00,0x63,0xC3,0x54,0x28,0xE2,0x2F,0x90,0x27,0x24};

uint32_t SiteRelationship::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first);
          this->__isset.first = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second);
          this->__isset.second = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->distance);
          this->__isset.distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SiteRelationship::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SiteRelationship");
  xfer += oprot->writeFieldBegin("first", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->first);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("second", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->second);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("distance", apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->distance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


